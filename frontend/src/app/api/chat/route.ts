import { NextRequest } from "next/server";\nimport { createClient } from "@supabase/supabase-js";\nimport { GoogleGenerativeAI } from "@google/generative-ai";\n\nexport const runtime = "nodejs";\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL as string,\n  process.env.NEXT_PUBLIC_SUPABASE_PUBLISHABLE_DEFAULT_KEY as string\n);\n\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY as string);\nconst model = genAI.getGenerativeModel({ model: "gemini-1.5-pro" });\n\nfunction detectTargetTables(question: string): number[] {\n  const nums = Array.from(new Set((question.match(/\b(1?[0-7]|[1-9])\b/g) || []).map(n => parseInt(n, 10))))\n    .filter(n => n >= 1 && n <= 17);\n  return nums.length ? nums : [1];\n}\n\nexport async function POST(req: NextRequest) {\n  try {\n    const body = await req.json();\n    const question: string = (body?.question || "").toString();\n    if (!question) {\n      return new Response(JSON.stringify({ error: "Question is required" }), { status: 400 });\n    }\n\n    const targets = detectTargetTables(question);\n    const previews: Record<string, any[]> = {};\n    const totals: Record<string, number> = {};\n\n    for (const n of targets) {\n      const table = `sdgs_${n}`;\n      const { data, error } = await supabase.from(table).select("*").limit(50);\n      if (error) {\n        return new Response(JSON.stringify({ error: `Supabase error on ${table}: ${error.message}` }), { status: 500 });\n      }\n      previews[table] = data || [];\n      if (data && data.length) {\n        const numericKeys = Object.keys(data[0] || {}).filter(k => k !== "nama_desa");\n        let sum = 0;\n        for (const row of data as any[]) {\n          for (const k of numericKeys) {\n            const v = Number((row as any)[k]);\n            if (!Number.isNaN(v)) sum += v;\n          }\n        }\n        totals[table] = sum;\n      }\n    }\n\n    const prompt = [\n      "Anda adalah asisten data untuk dashboard SDGs desa. Jawab secara ringkas, akurat, dan gunakan bahasa Indonesia yang sopan.",\n      `Pertanyaan pengguna: "${question}"`,\n      "",\n      "Berikut ringkasan data (cuplikan maksimal 50 baris per tabel):",\n      Object.entries(previews).map(([table, rows]) => `${table} (contoh 5 baris):\n${JSON.stringify((rows as any[]).slice(0,5), null, 2)}`).join("\n\n"),\n      "",\n      "Total numerik kasar (penjumlahan sederhana kolom numerik, bukan statistik resmi):",\n      JSON.stringify(totals, null, 2),\n      "",\n      "Instruksi:",\n      "- Jelaskan jawaban berdasarkan data di atas.",\n      "- Jika ada keterbatasan (misal hanya cuplikan), jelaskan singkat.",\n      "- Berikan saran visualisasi relevan (bar/pie) bila cocok, tapi jangan kirim kode.",\n      "- Jangan mengarang data di luar cuplikan."\n    ].join("\n");\n\n    const result = await model.generateContent(prompt);\n    const answer = result.response.text();\n\n    return new Response(JSON.stringify({ answer, previews, totals, used: targets }), { status: 200 });\n  } catch (err: any) {\n    return new Response(JSON.stringify({ error: err?.message || "Unknown error" }), { status: 500 });\n  }\n}